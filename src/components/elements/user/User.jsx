import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faUsers } from "@fortawesome/free-solid-svg-icons";
import avatar from '../../../assets/img/sbcf-default-avatar.png';
import "./user.scss";

const User = () => {
    const {token, username} = useSelector((state) => state.user);
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [following, setFollowing] = useState(new Set()); // ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const navigate = useNavigate(); // ‚úÖ –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è

    // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    useEffect(() => {
        if (!token) {
            setError("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            setLoading(false);
            return;
        }

        const fetchUsers = async () => {
            try {
                const response = await fetch("http://49.13.31.246:9191/users", {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json",
                        "x-access-token": token,
                    },
                });
                if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞: ${response.status}`);

                const data = await response.json();

                // ‚úÖ –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
                const filteredUsers = data.filter(user => user.username !== username);
                setUsers(filteredUsers);
            } catch (err) {
                setError(err.message);
            }
        };

        const fetchMyFollowing = async () => {
            try {
                const response = await fetch(`http://49.13.31.246:9191/followings/${username}`, {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json",
                        "x-access-token": token,
                    },
                });
                if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫");

                const data = await response.json();
                const myFollowing = new Set(data.following.map((u) => u.username)); // ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º Set –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫
                setFollowing(myFollowing);
            } catch (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:", err.message);
            } finally {
                setLoading(false);
            }
        };

        fetchUsers();
        fetchMyFollowing();
    }, [token, username]);

    // üìå –ü–æ–¥–ø–∏—Å–∫–∞ / –û—Ç–ø–∏—Å–∫–∞
    const toggleFollow = async (userToFollow) => {
        const isFollowing = following.has(userToFollow);
        const url = `http://49.13.31.246:9191/${isFollowing ? "unfollow" : "follow"}`;

        try {
            const response = await fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "x-access-token": token,
                },
                body: JSON.stringify({username: userToFollow}),
            });
            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ ${isFollowing ? "–æ—Ç–ø–∏—Å–∫–∏" : "–ø–æ–¥–ø–∏—Å–∫–∏"}`);

            // üìå –û–±–Ω–æ–≤–ª—è–µ–º UI –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
            setFollowing((prev) => {
                const updatedSet = new Set(prev);
                if (isFollowing) {
                    updatedSet.delete(userToFollow);
                } else {
                    updatedSet.add(userToFollow);
                }
                return updatedSet;
            });
        } catch (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ/–æ—Ç–ø–∏—Å–∫–µ:", err.message);
        }
    };

    // üìå UI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
    if (loading) return <div className="loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    if (error) return <div className="error-msg">{error}</div>;

    return (
        <div className="user-list-container">
            <h2 className="uberschrift_user">
                <FontAwesomeIcon icon={faUsers}/> Alle User
            </h2>
            <div className="user-list">
                {users.map((userItem) => (
                    <div key={userItem._id} className="user-item">
                        {/* ‚úÖ –ö–ª–∏–∫ –Ω–∞ –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ –∏–º—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å */}
                        <div className="user-info" onClick={() => navigate(`/user/${userItem.username}`)}>
                            <img src={userItem.avatar || avatar} alt="Avatar" className="user-avatar"/>
                            <h4>{userItem.fullName || "Ohne Name"}</h4>
                            <p>@{userItem.username}</p>
                        </div>

                        {/* ‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ / –æ—Ç–ø–∏—Å–∫–∏ */}
                        <button
                            className={`follow-btn ${following.has(userItem.username) ? "following" : ""}`}
                            onClick={() => toggleFollow(userItem.username)}
                        >
                            {following.has(userItem.username) ? "L√∂schen" : "Folgen"}
                        </button>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default User;